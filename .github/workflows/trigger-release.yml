name: Trigger Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - 'patch'
          - 'minor'
          - 'major'
      prerelease:
        description: 'Create a prerelease version'
        required: false
        default: 'none'
        type: choice
        options:
          - 'none'
          - 'beta'
          - 'alpha'

permissions:
  contents: write

jobs:
  create-release-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.release.outputs.new-version }}
      new-tag: ${{ steps.release.outputs.new-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create Release Tag
        id: release
        run: |
          # Get current version from Cargo.toml
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"

          # Parse version components (handle prerelease versions)
          BASE_VERSION=${CURRENT_VERSION%%-*}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"

          # Calculate new version based on bump type
          case "${{ github.event.inputs.version_bump }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac

          # Handle prerelease suffix if needed
          PRERELEASE_SUFFIX=""
          if [ "${{ github.event.inputs.prerelease }}" = "beta" ]; then
            # Check if we're already in a beta
            if [[ "$CURRENT_VERSION" == *"-beta."* ]]; then
              # Increment beta number
              BETA_NUM=$(echo "$CURRENT_VERSION" | grep -oP 'beta\.\K[0-9]+')
              BETA_NUM=$((BETA_NUM + 1))
              PRERELEASE_SUFFIX="-beta.${BETA_NUM}"
            else
              PRERELEASE_SUFFIX="-beta.0"
            fi
          elif [ "${{ github.event.inputs.prerelease }}" = "alpha" ]; then
            # Check if we're already in an alpha
            if [[ "$CURRENT_VERSION" == *"-alpha."* ]]; then
              # Increment alpha number
              ALPHA_NUM=$(echo "$CURRENT_VERSION" | grep -oP 'alpha\.\K[0-9]+')
              ALPHA_NUM=$((ALPHA_NUM + 1))
              PRERELEASE_SUFFIX="-alpha.${ALPHA_NUM}"
            else
              PRERELEASE_SUFFIX="-alpha.0"
            fi
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}${PRERELEASE_SUFFIX}"
          echo "New version: $NEW_VERSION"

          # Update Cargo.toml with new version
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml

          # Update Cargo.lock
          cargo update --workspace

          # Commit version changes
          git add Cargo.toml Cargo.lock
          git commit -m "chore(release): ${NEW_VERSION} [skip ci]" || echo "No changes to commit"

          # Create git tag - this will trigger the cargo-dist release workflow
          git tag "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"

          # Push changes and tag
          git push origin HEAD:${{ github.ref_name }}
          git push origin "v${NEW_VERSION}"

          echo "new-version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "new-tag=v${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "âœ… Created release tag v${NEW_VERSION}"
          echo "The cargo-dist workflow will now automatically build and publish binaries"