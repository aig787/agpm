name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump override (leave empty to auto-detect from commits)'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - 'patch'
          - 'minor'
          - 'major'
      prerelease:
        description: 'Pre-release type (leave empty for stable release)'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - 'beta'
          - 'alpha'

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
      new-release-git-tag: ${{ steps.semantic.outputs.new-release-git-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install semantic-release and plugins
        run: |
          npm install -g \
            semantic-release \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            @semantic-release/github \
            @semantic-release/git \
            @semantic-release-cargo/semantic-release-cargo \
            conventional-changelog-conventionalcommits

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Configure Git for semantic-release
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # Configure branch based on input
          BRANCH="main"
          if [ "${{ github.event.inputs.prerelease }}" = "beta" ]; then
            BRANCH="beta"
            # Create beta branch if it doesn't exist
            git checkout -B beta
          elif [ "${{ github.event.inputs.prerelease }}" = "alpha" ]; then
            BRANCH="alpha"
            # Create alpha branch if it doesn't exist
            git checkout -B alpha
          fi
          
          # Handle version bump override
          if [ "${{ github.event.inputs.version_bump }}" != "" ]; then
            echo "📌 Version bump override: ${{ github.event.inputs.version_bump }}"
            
            # Create a temporary commit with the appropriate type to force the desired bump
            case "${{ github.event.inputs.version_bump }}" in
              "major")
                git commit --allow-empty -m $'feat!: Manual release triggered with major version bump\n\nBREAKING CHANGE: Manual major version bump requested by release workflow'
                ;;
              "minor")
                git commit --allow-empty -m "feat: Manual release triggered with minor version bump"
                ;;
              "patch")
                git commit --allow-empty -m "fix: Manual release triggered with patch version bump"
                ;;
            esac
          fi
          
          # Run semantic-release
          npx semantic-release --branches $BRANCH 2>&1 | tee semantic-release.log
          
          # Parse the output to extract version info
          if grep -q "Published release" semantic-release.log; then
            VERSION=$(grep -oP 'Published release \K[0-9]+\.[0-9]+\.[0-9]+(-[a-z]+\.[0-9]+)?' semantic-release.log | head -1)
            echo "new-release-published=true" >> $GITHUB_OUTPUT
            echo "new-release-version=${VERSION}" >> $GITHUB_OUTPUT
            echo "new-release-git-tag=v${VERSION}" >> $GITHUB_OUTPUT
            echo "✅ Released version ${VERSION}"
          else
            echo "new-release-published=false" >> $GITHUB_OUTPUT
            echo "⚠️ Semantic-release did not create a release. This might happen if there are no changes since the last release."
            echo "To force a release, ensure you have at least one commit with a conventional commit message."
          fi

  build-binaries:
    name: Build Release Binaries
    needs: release
    if: needs.release.outputs.new-release-published == 'true'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: ccpm
            archive_name: ccpm-x86_64-linux.tar.gz
            
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: ccpm
            archive_name: ccpm-aarch64-linux.tar.gz
            use_cross: true
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: ccpm.exe
            archive_name: ccpm-x86_64-windows.zip
            
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: ccpm
            archive_name: ccpm-x86_64-macos.tar.gz
            
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: ccpm
            archive_name: ccpm-aarch64-macos.tar.gz
    
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.new-release-git-tag }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.use_cross == true
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build release binary (native)
        if: matrix.use_cross != true
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build release binary (cross)
        if: matrix.use_cross == true
        run: cross build --release --target ${{ matrix.target }}

      - name: Verify binary
        if: matrix.os != 'windows-latest' && matrix.use_cross != true
        run: |
          target/${{ matrix.target }}/release/${{ matrix.binary_name }} --version

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.archive_name }} ${{ matrix.binary_name }}
          cd ../../..
          echo "ARCHIVE_PATH=${{ matrix.archive_name }}" >> $GITHUB_ENV

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Compress-Archive -Path target/${{ matrix.target }}/release/${{ matrix.binary_name }} -DestinationPath ${{ matrix.archive_name }}
          echo "ARCHIVE_PATH=${{ matrix.archive_name }}" >> $env:GITHUB_ENV

      - name: Upload binary to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release.outputs.new-release-git-tag }}
          files: ${{ env.ARCHIVE_PATH }}
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crates:
    name: Publish to crates.io
    needs: release
    if: needs.release.outputs.new-release-published == 'true' && github.event.inputs.prerelease == ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.new-release-git-tag }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cargo publish --allow-dirty
        continue-on-error: true  # Don't fail the workflow if crates.io publish fails
