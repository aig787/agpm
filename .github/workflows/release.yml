name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - 'patch'
          - 'minor'
          - 'major'
      prerelease:
        description: 'Pre-release type (leave empty for stable release)'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - 'beta'
          - 'alpha'

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    outputs:
      new-release-published: ${{ steps.release.outputs.new-release-published }}
      new-release-version: ${{ steps.release.outputs.new-release-version }}
      new-release-git-tag: ${{ steps.release.outputs.new-release-git-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install release tools
        run: |
          npm install -g \
            conventional-changelog-cli \
            conventional-changelog-conventionalcommits

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # Get current version from Cargo.toml
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"

          # Parse version components (handle prerelease versions)
          BASE_VERSION=${CURRENT_VERSION%%-*}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"

          # Calculate new version based on bump type
          case "${{ github.event.inputs.version_bump }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac

          # Handle prerelease suffix if needed
          PRERELEASE_SUFFIX=""
          if [ "${{ github.event.inputs.prerelease }}" = "beta" ]; then
            PRERELEASE_SUFFIX="-beta.0"
          elif [ "${{ github.event.inputs.prerelease }}" = "alpha" ]; then
            PRERELEASE_SUFFIX="-alpha.0"
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}${PRERELEASE_SUFFIX}"
          echo "New version: $NEW_VERSION"

          # Generate changelog for the new version
          echo "Generating changelog..."
          npx conventional-changelog -p conventionalcommits -i CHANGELOG.md -s --release-count 1

          # Extract just the new release notes (between first two ## headers)
          RELEASE_NOTES=$(awk '/^##[^#]/{if(++count==1)next; if(count==2)exit} count==1' CHANGELOG.md)

          # Update Cargo.toml with new version
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml

          # Update Cargo.lock
          cargo update --workspace

          # Commit version changes
          git add Cargo.toml Cargo.lock CHANGELOG.md
          git commit -m "chore(release): ${NEW_VERSION} [skip ci]"

          # Create git tag
          git tag "v${NEW_VERSION}"

          # Push changes
          git push origin HEAD:${{ github.ref_name }}
          git push origin "v${NEW_VERSION}"

          # Publish to crates.io
          cargo publish --token "${CARGO_REGISTRY_TOKEN}" || echo "Crates.io publish failed (may already be published)"

          # Create GitHub release
          gh release create "v${NEW_VERSION}" \
            --title "v${NEW_VERSION}" \
            --notes "${RELEASE_NOTES}" \
            $([[ "$PRERELEASE_SUFFIX" != "" ]] && echo "--prerelease" || echo "")

          echo "new-release-published=true" >> $GITHUB_OUTPUT
          echo "new-release-version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "new-release-git-tag=v${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "âœ… Released version ${NEW_VERSION}"

  build-binaries:
    name: Build Release Binaries
    needs: release
    if: needs.release.outputs.new-release-published == 'true'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: ccpm
            archive_name: ccpm-x86_64-linux.tar.gz
            
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: ccpm
            archive_name: ccpm-aarch64-linux.tar.gz
            use_cross: true
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: ccpm.exe
            archive_name: ccpm-x86_64-windows.zip
            
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: ccpm
            archive_name: ccpm-x86_64-macos.tar.gz
            
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: ccpm
            archive_name: ccpm-aarch64-macos.tar.gz
    
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.new-release-git-tag }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.use_cross == true
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build release binary (native)
        if: matrix.use_cross != true
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build release binary (cross)
        if: matrix.use_cross == true
        run: cross build --release --target ${{ matrix.target }}

      - name: Verify binary
        if: matrix.os != 'windows-latest' && matrix.use_cross != true
        run: |
          target/${{ matrix.target }}/release/${{ matrix.binary_name }} --version

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.archive_name }} ${{ matrix.binary_name }}
          cd ../../..
          echo "ARCHIVE_PATH=${{ matrix.archive_name }}" >> $GITHUB_ENV

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Compress-Archive -Path target/${{ matrix.target }}/release/${{ matrix.binary_name }} -DestinationPath ${{ matrix.archive_name }}
          echo "ARCHIVE_PATH=${{ matrix.archive_name }}" >> $env:GITHUB_ENV

      - name: Upload binary to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release.outputs.new-release-git-tag }}
          files: ${{ env.ARCHIVE_PATH }}
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
