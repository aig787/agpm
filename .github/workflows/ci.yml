name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  fmt:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt -- --check

  msrv:
    name: MSRV Check (1.85.0)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@1.85.0

      - uses: Swatinem/rust-cache@v2

      - name: Verify MSRV
        run: cargo build --verbose

  clippy:
    name: Clippy Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - uses: Swatinem/rust-cache@v2

      - name: Run clippy
        run: cargo clippy -- -D warnings

  test:
    name: Test Suite
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, windows-11-arm, macos-latest]
        rust: [stable]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}

      - uses: Swatinem/rust-cache@v2

      - name: Install nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Run tests with nextest
        run: cargo nextest run --verbose

  doctests:
    name: Documentation Tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, windows-11-arm, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - name: Run doctests
        run: cargo test --doc --verbose

  stress:
    name: Stress Tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, windows-11-arm, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - name: Install nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Run stress tests
        run: cargo nextest run --profile all --test stress --verbose

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - name: Install llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Install nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Generate coverage
        run: cargo llvm-cov nextest --ignore-filename-regex "test_utils" --verbose --html

  build:
    name: Build Check
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: agpm

          - os: ubuntu-24.04-arm # Native ARM64 Linux runner
            target: aarch64-unknown-linux-gnu
            binary_name: agpm

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: agpm.exe

          - os: windows-11-arm # Native ARM64 Windows runner
            target: aarch64-pc-windows-msvc
            binary_name: agpm.exe

          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: agpm

          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: agpm

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --verbose

      - name: Verify binary exists
        run: test -f target/${{ matrix.target }}/release/${{ matrix.binary_name }}
        shell: bash
