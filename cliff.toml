# git-cliff configuration for changelog generation
# https://git-cliff.org/docs/configuration

[changelog]
# Template for the changelog header
header = """
# Changelog\n
All notable changes to CCPM will be documented in this file.\n
"""
# Template for the changelog body
body = """
{% if version %}\
    ## [{{ version }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# Remove the leading and trailing whitespace from the template
trim = true
# Template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# Postprocessors to be applied to the changelog body
postprocessors = []

[git]
# Parse the commits based on conventional commits
conventional_commits = true
# List of commit types to include in the changelog
filter_commits = true
# Group commits by their type
commit_groups = [
    { name = "Features", tags = ["feat"], body = "^[feat]" },
    { name = "Bug Fixes", tags = ["fix"], body = "^[fix]" },
    { name = "Documentation", tags = ["docs"], body = "^[docs]" },
    { name = "Performance", tags = ["perf"], body = "^[perf]" },
    { name = "Refactor", tags = ["refactor"], body = "^[refactor]" },
    { name = "Style", tags = ["style"], body = "^[style]" },
    { name = "Testing", tags = ["test"], body = "^[test]" },
    { name = "Chore", tags = ["chore"], body = "^[chore]" },
    { name = "CI", tags = ["ci"], body = "^[ci]" },
]
# Filter out commits that don't match conventional format
filter_unconventional = true
# Process each line of the commit message
commit_preprocessors = [
    { pattern = '\((\w+)\)', replace = "($1)" },
]
# Parse the commits based on conventional commits
commit_parsers = [
    { message = "^feat", group = "Features" },
    { message = "^fix", group = "Bug Fixes" },
    { message = "^docs", group = "Documentation" },
    { message = "^perf", group = "Performance" },
    { message = "^refactor", group = "Refactor" },
    { message = "^style", group = "Style" },
    { message = "^test", group = "Testing" },
    { message = "^chore\\(release\\)", skip = true },
    { message = "^chore", group = "Chore" },
    { message = "^ci", group = "CI" },
]
# Protect breaking changes from being skipped
protect_breaking_commits = false
# Sort commits by the oldest to newest
sort_commits = "oldest"